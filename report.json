[{"filePath":"C:\\Users\\Vadim_Scherbakov\\JS\\automation-js-basic\\automation-js-basic\\app\\numbers_validator.js","messages":[{"ruleId":"require-jsdoc","severity":2,"message":"Missing JSDoc comment.","line":32,"column":26,"nodeType":"FunctionExpression","messageId":"missingJSDocComment","endLine":38,"endColumn":4}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * A simple class containg methods for validating number\n *\n * @class NumbersValidator\n */\nexport default class NumbersValidator {\n  /**\n   * Creates an instace of NumbersValidator.\n   * @memberof NumbersValidator\n   */\n  constructor() {\n  };\n  /**\n   * @param {Number} number number to check\n   * @return {Boolean} true if element is even\n   * @memberof NumbersValidator\n   */\n  isNumberEven(number) {\n    const typeofVariable = typeof number;\n    if (typeofVariable !== 'number') {\n      throw new Error(`[${number}] is not of type \"Number\" it is of type \"${typeofVariable}\"`);\n    } else {\n      return number % 2 === 0;\n    }\n  };\n\n  /**\n   * @param {Array<Number>} arrayOfNumbers array of numbers to go through\n   * @return {Array<Number>} array of even numbers\n   */\n\n  getEvenNumbersFromArray(arrayOfNumbers) {\n    if (Array.isArray(arrayOfNumbers) &&\n    arrayOfNumbers.every((item) => typeof item === 'number')) {\n      return arrayOfNumbers.filter(this.isNumberEven);\n    }\n    throw new Error(`[${arrayOfNumbers}] is not an array of \"Numbers\"`);\n  };\n\n  /**\n   * @param {Array<Number>} arrayOfNumbers array of numbers to go through\n   * @return {Boolean} true if all are numbers\n   */\n  isAllNumbers(arrayOfNumbers) {\n    if (!Array.isArray(arrayOfNumbers)) {\n      throw new Error(`[${arrayOfNumbers}] is not an array`);\n    }\n    return arrayOfNumbers.every((n) => typeof n === 'number');\n  };\n\n  /**\n   * Check if passed value is integer\n   * @param {number} n - value\n   * @return {boolean} true if value is integer\n   */\n  isInteger(n) {\n    if (typeof n !== 'number') {\n      throw new Error(`[${n}] is not a number`);\n    }\n    return Number.isInteger(n);\n  };\n};\n","usedDeprecatedRules":[{"ruleId":"valid-jsdoc","replacedBy":[]},{"ruleId":"require-jsdoc","replacedBy":[]}]},{"filePath":"C:\\Users\\Vadim_Scherbakov\\JS\\automation-js-basic\\automation-js-basic\\test\\numbers-validator\\getEvenNumberFromArray.spec.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"valid-jsdoc","replacedBy":[]},{"ruleId":"require-jsdoc","replacedBy":[]}]},{"filePath":"C:\\Users\\Vadim_Scherbakov\\JS\\automation-js-basic\\automation-js-basic\\test\\numbers-validator\\isAllNumbers.spec.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"valid-jsdoc","replacedBy":[]},{"ruleId":"require-jsdoc","replacedBy":[]}]},{"filePath":"C:\\Users\\Vadim_Scherbakov\\JS\\automation-js-basic\\automation-js-basic\\test\\numbers-validator\\isInteger.spec.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"valid-jsdoc","replacedBy":[]},{"ruleId":"require-jsdoc","replacedBy":[]}]},{"filePath":"C:\\Users\\Vadim_Scherbakov\\JS\\automation-js-basic\\automation-js-basic\\test\\numbers-validator\\isNumberEven.spec.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"valid-jsdoc","replacedBy":[]},{"ruleId":"require-jsdoc","replacedBy":[]}]}]