{
  "stats": {
    "suites": 8,
    "tests": 22,
    "passes": 22,
    "pending": 0,
    "failures": 0,
    "start": "2023-05-29T08:49:36.369Z",
    "end": "2023-05-29T08:49:36.425Z",
    "duration": 56,
    "testsRegistered": 22,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "0033ba89-b8b7-4d96-964b-397eab2e36f4",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "9543879e-cd89-43a2-b1ca-6bc96f78420e",
          "title": "getEvenNumbersFromArray positive tests",
          "fullFile": "C:\\Users\\Vadim_Scherbakov\\JS\\automation-js-basic\\automation-js-basic-ui\\automation-js-basic\\test\\numbers-validator\\getEvenNumberFromArray.spec.js",
          "file": "\\test\\numbers-validator\\getEvenNumberFromArray.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"getEvenNumbersFromArray positive tests\"",
              "fullTitle": "getEvenNumbersFromArray positive tests \"before each\" hook in \"getEvenNumbersFromArray positive tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "0d2d8a0d-3ad5-4aad-af2d-93cd5be84a1c",
              "parentUUID": "9543879e-cd89-43a2-b1ca-6bc96f78420e",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"getEvenNumbersFromArray positive tests\"",
              "fullTitle": "getEvenNumbersFromArray positive tests \"after each\" hook in \"getEvenNumbersFromArray positive tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "25cbac8a-bcc6-4d82-90f9-3b229cc27a34",
              "parentUUID": "9543879e-cd89-43a2-b1ca-6bc96f78420e",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return an array of even numbers, if positive and negative num are provided",
              "fullTitle": "getEvenNumbersFromArray positive tests should return an array of even numbers, if positive and negative num are provided",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const evenNumbersArray = validator.getEvenNumbersFromArray(randomArray);\nexpect(evenNumbersArray).to.be.eql(randomArray.filter((element) => {\n  return element % 2 === 0;\n}));",
              "err": {},
              "uuid": "b9cae369-712f-4e6a-8982-d773d686692f",
              "parentUUID": "9543879e-cd89-43a2-b1ca-6bc96f78420e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an array with 0 if 0 is provided",
              "fullTitle": "getEvenNumbersFromArray positive tests should return an array with 0 if 0 is provided",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = validator.getEvenNumbersFromArray(zeroArray);\nexpect(result).to.be.eql(zeroArray.filter((element) => {\n  return element % 2 === 0;\n}));",
              "err": {},
              "uuid": "12ab534d-fe1f-45c7-b5e2-43cd6722a318",
              "parentUUID": "9543879e-cd89-43a2-b1ca-6bc96f78420e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return empty array if empty array is provided",
              "fullTitle": "getEvenNumbersFromArray positive tests should return empty array if empty array is provided",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const emptyResult = validator.getEvenNumbersFromArray(emptyArray);\nexpect(emptyResult).to.be.eql(emptyArray);",
              "err": {},
              "uuid": "2b1cf429-c6cf-4f88-9b6b-12d0b3959088",
              "parentUUID": "9543879e-cd89-43a2-b1ca-6bc96f78420e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an empty array if array is of odd numbers only",
              "fullTitle": "getEvenNumbersFromArray positive tests should throw an empty array if array is of odd numbers only",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const oddNumbersArray = validator.getEvenNumbersFromArray(randomOddArray);\nexpect(oddNumbersArray).to.be.eql([]);",
              "err": {},
              "uuid": "76b8a271-492b-4fdf-ad00-7b1def957cea",
              "parentUUID": "9543879e-cd89-43a2-b1ca-6bc96f78420e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b9cae369-712f-4e6a-8982-d773d686692f",
            "12ab534d-fe1f-45c7-b5e2-43cd6722a318",
            "2b1cf429-c6cf-4f88-9b6b-12d0b3959088",
            "76b8a271-492b-4fdf-ad00-7b1def957cea"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "03757c1c-0d13-4681-ab1b-9b5f7c98c44d",
          "title": "getEvenNumbersFromArray negative tests",
          "fullFile": "C:\\Users\\Vadim_Scherbakov\\JS\\automation-js-basic\\automation-js-basic-ui\\automation-js-basic\\test\\numbers-validator\\getEvenNumberFromArray.spec.js",
          "file": "\\test\\numbers-validator\\getEvenNumberFromArray.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"getEvenNumbersFromArray negative tests\"",
              "fullTitle": "getEvenNumbersFromArray negative tests \"before each\" hook in \"getEvenNumbersFromArray negative tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "7f43ae27-4325-4cd8-81aa-1e5b994a297b",
              "parentUUID": "03757c1c-0d13-4681-ab1b-9b5f7c98c44d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"getEvenNumbersFromArray negative tests\"",
              "fullTitle": "getEvenNumbersFromArray negative tests \"after each\" hook in \"getEvenNumbersFromArray negative tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "be8740e4-c7e9-4ff1-adff-6ee436bb2f93",
              "parentUUID": "03757c1c-0d13-4681-ab1b-9b5f7c98c44d",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should throw an error if array is not full of numbers",
              "fullTitle": "getEvenNumbersFromArray negative tests should throw an error if array is not full of numbers",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => validator.getEvenNumbersFromArray(notAllNumbersArray))\n    .to.throw(`[${notAllNumbersArray}] is not an array of \"Numbers\"`);",
              "err": {},
              "uuid": "df7f9a3f-3bad-4fad-924f-fa07a3ea8ec6",
              "parentUUID": "03757c1c-0d13-4681-ab1b-9b5f7c98c44d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error if array is not type of numbers",
              "fullTitle": "getEvenNumbersFromArray negative tests should throw an error if array is not type of numbers",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "arrayOfValues.forEach((element) => {\n  expect(() => validator.getEvenNumbersFromArray(element))\n      .to.throw(`[${element}] is not an array of \"Numbers\"`);\n});",
              "err": {},
              "uuid": "cfa2d987-0ec3-49a7-8b81-191ab2d24a24",
              "parentUUID": "03757c1c-0d13-4681-ab1b-9b5f7c98c44d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error if array of positive and negative fractional numbers",
              "fullTitle": "getEvenNumbersFromArray negative tests should throw an error if array of positive and negative fractional numbers",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "randomFloatArray.forEach((element) => {\n  expect(() => validator.getEvenNumbersFromArray(element))\n      .to.throw(`[${element}] is not an array of \"Numbers\"`);\n});",
              "err": {},
              "uuid": "03e485b7-7dff-42ff-8053-c63b30fb54b8",
              "parentUUID": "03757c1c-0d13-4681-ab1b-9b5f7c98c44d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "df7f9a3f-3bad-4fad-924f-fa07a3ea8ec6",
            "cfa2d987-0ec3-49a7-8b81-191ab2d24a24",
            "03e485b7-7dff-42ff-8053-c63b30fb54b8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "7588a3c3-da90-4072-92e2-11a5a19b0832",
          "title": "isAllNumbers positive tests",
          "fullFile": "C:\\Users\\Vadim_Scherbakov\\JS\\automation-js-basic\\automation-js-basic-ui\\automation-js-basic\\test\\numbers-validator\\isAllNumbers.spec.js",
          "file": "\\test\\numbers-validator\\isAllNumbers.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"isAllNumbers positive tests\"",
              "fullTitle": "isAllNumbers positive tests \"before each\" hook in \"isAllNumbers positive tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "5487eb3c-b4a2-4fb5-b432-d12ede02024f",
              "parentUUID": "7588a3c3-da90-4072-92e2-11a5a19b0832",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"isAllNumbers positive tests\"",
              "fullTitle": "isAllNumbers positive tests \"after each\" hook in \"isAllNumbers positive tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "1c33402b-5989-46db-9316-ae6afb670448",
              "parentUUID": "7588a3c3-da90-4072-92e2-11a5a19b0832",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return true if array of numbers is provided",
              "fullTitle": "isAllNumbers positive tests should return true if array of numbers is provided",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const isAllNumbersArray = validator.isAllNumbers(randomArray);\nexpect(isAllNumbersArray).to.be.true;",
              "err": {},
              "uuid": "e43fc289-b1e0-44b7-b4ef-1b125a20793b",
              "parentUUID": "7588a3c3-da90-4072-92e2-11a5a19b0832",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true if array with 0 is provided",
              "fullTitle": "isAllNumbers positive tests should return true if array with 0 is provided",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const resultZeroArray = validator.isAllNumbers(zeroArray);\nexpect(resultZeroArray).to.be.true;",
              "err": {},
              "uuid": "362e8a8e-9fb7-4fcd-82ff-e15dc58213e8",
              "parentUUID": "7588a3c3-da90-4072-92e2-11a5a19b0832",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true if array of negative and positive float numbers is provided",
              "fullTitle": "isAllNumbers positive tests should return true if array of negative and positive float numbers is provided",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const resultFloatArray = validator.isAllNumbers(randomFloatArray);\nexpect(resultFloatArray).to.be.true;",
              "err": {},
              "uuid": "76384d1d-07e1-4fdb-b8dc-2afe8b8a1b07",
              "parentUUID": "7588a3c3-da90-4072-92e2-11a5a19b0832",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e43fc289-b1e0-44b7-b4ef-1b125a20793b",
            "362e8a8e-9fb7-4fcd-82ff-e15dc58213e8",
            "76384d1d-07e1-4fdb-b8dc-2afe8b8a1b07"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "7fd9119c-3dfe-4299-9dde-d4820d837b58",
          "title": "isAllNumbers negative tests",
          "fullFile": "C:\\Users\\Vadim_Scherbakov\\JS\\automation-js-basic\\automation-js-basic-ui\\automation-js-basic\\test\\numbers-validator\\isAllNumbers.spec.js",
          "file": "\\test\\numbers-validator\\isAllNumbers.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"isAllNumbers negative tests\"",
              "fullTitle": "isAllNumbers negative tests \"before each\" hook in \"isAllNumbers negative tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "a9623a9b-cbaf-4db4-a309-085e911c5e18",
              "parentUUID": "7fd9119c-3dfe-4299-9dde-d4820d837b58",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"isAllNumbers negative tests\"",
              "fullTitle": "isAllNumbers negative tests \"after each\" hook in \"isAllNumbers negative tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "6b14a09a-fb60-4e24-9a4c-c91f8d964c1b",
              "parentUUID": "7fd9119c-3dfe-4299-9dde-d4820d837b58",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should throw an error if it is not an array",
              "fullTitle": "isAllNumbers negative tests should throw an error if it is not an array",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "nonArray.forEach((element) => {\n  expect(() => validator.isAllNumbers(element))\n      .to.throw(`[${element}] is not an array`);\n});",
              "err": {},
              "uuid": "7acc2d0a-ef0e-4dbc-bcd4-10c8ff8cad7c",
              "parentUUID": "7fd9119c-3dfe-4299-9dde-d4820d837b58",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false if it is not an array of numbers",
              "fullTitle": "isAllNumbers negative tests should return false if it is not an array of numbers",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "nonNumbersArray.forEach((element) => {\n  expect(validator.isAllNumbers(element)).to.equal(false);\n});",
              "err": {},
              "uuid": "b11fc724-a01b-4417-9dd2-ab3c98d99ebf",
              "parentUUID": "7fd9119c-3dfe-4299-9dde-d4820d837b58",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7acc2d0a-ef0e-4dbc-bcd4-10c8ff8cad7c",
            "b11fc724-a01b-4417-9dd2-ab3c98d99ebf"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "0983a30c-26c6-4327-a1a1-0267a93f6ec9",
          "title": "isInteger positive tests",
          "fullFile": "C:\\Users\\Vadim_Scherbakov\\JS\\automation-js-basic\\automation-js-basic-ui\\automation-js-basic\\test\\numbers-validator\\isInteger.spec.js",
          "file": "\\test\\numbers-validator\\isInteger.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"isInteger positive tests\"",
              "fullTitle": "isInteger positive tests \"before each\" hook in \"isInteger positive tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "f630ac17-ad1f-4f12-9115-5b6c5fadacaf",
              "parentUUID": "0983a30c-26c6-4327-a1a1-0267a93f6ec9",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"isInteger positive tests\"",
              "fullTitle": "isInteger positive tests \"after each\" hook in \"isInteger positive tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "aaa4108f-ba44-4dba-8d23-b13d7035b806",
              "parentUUID": "0983a30c-26c6-4327-a1a1-0267a93f6ec9",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return true if positive or negative number is provided",
              "fullTitle": "isInteger positive tests should return true if positive or negative number is provided",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validatingResult = validator.isInteger(randomNumber);\nexpect(validatingResult).to.be.equal(true);",
              "err": {},
              "uuid": "2d83ddea-8482-4237-a202-bc1aa58d3ed1",
              "parentUUID": "0983a30c-26c6-4327-a1a1-0267a93f6ec9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true if zero is provided",
              "fullTitle": "isInteger positive tests should return true if zero is provided",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const zero = validator.isInteger(0);\nexpect(zero).to.be.true;",
              "err": {},
              "uuid": "1997b51f-feb6-4a1e-925e-4759a13116d0",
              "parentUUID": "0983a30c-26c6-4327-a1a1-0267a93f6ec9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2d83ddea-8482-4237-a202-bc1aa58d3ed1",
            "1997b51f-feb6-4a1e-925e-4759a13116d0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "6a5f044d-e2c8-4ba8-b1ed-e17296b8e8e9",
          "title": "isInteger negative tests",
          "fullFile": "C:\\Users\\Vadim_Scherbakov\\JS\\automation-js-basic\\automation-js-basic-ui\\automation-js-basic\\test\\numbers-validator\\isInteger.spec.js",
          "file": "\\test\\numbers-validator\\isInteger.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"isInteger negative tests\"",
              "fullTitle": "isInteger negative tests \"before each\" hook in \"isInteger negative tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "114d9d6d-fe36-40ba-aa16-798a9c34d03b",
              "parentUUID": "6a5f044d-e2c8-4ba8-b1ed-e17296b8e8e9",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"isInteger negative tests\"",
              "fullTitle": "isInteger negative tests \"after each\" hook in \"isInteger negative tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "e8dc5f94-5068-4e26-b9c6-5eb6962238ec",
              "parentUUID": "6a5f044d-e2c8-4ba8-b1ed-e17296b8e8e9",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should throw an error if non - number is provided",
              "fullTitle": "isInteger negative tests should throw an error if non - number is provided",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "nonNumbersArray.forEach((element) => {\n  expect(() => validator.isInteger(element))\n      .to.throw(`[${element}] is not a number`);\n});",
              "err": {},
              "uuid": "c740cec3-241c-4837-beca-960cd9514f1e",
              "parentUUID": "6a5f044d-e2c8-4ba8-b1ed-e17296b8e8e9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false if fractional number is provided",
              "fullTitle": "isInteger negative tests should return false if fractional number is provided",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => validator.isInteger(randomFloat))\n    .to.throw(`[${randomFloat}] is not a number`);",
              "err": {},
              "uuid": "2b5c6e6a-ab4e-42cd-b4c7-571f7d25e0b5",
              "parentUUID": "6a5f044d-e2c8-4ba8-b1ed-e17296b8e8e9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c740cec3-241c-4837-beca-960cd9514f1e",
            "2b5c6e6a-ab4e-42cd-b4c7-571f7d25e0b5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "6aa2102c-5526-4aff-ab25-1ba9f795b5b2",
          "title": "isNumberEven positive tests",
          "fullFile": "C:\\Users\\Vadim_Scherbakov\\JS\\automation-js-basic\\automation-js-basic-ui\\automation-js-basic\\test\\numbers-validator\\isNumberEven.spec.js",
          "file": "\\test\\numbers-validator\\isNumberEven.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"isNumberEven positive tests\"",
              "fullTitle": "isNumberEven positive tests \"before each\" hook in \"isNumberEven positive tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "e7069a80-e1b6-40ce-b837-d272c27fad4d",
              "parentUUID": "6aa2102c-5526-4aff-ab25-1ba9f795b5b2",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"isNumberEven positive tests\"",
              "fullTitle": "isNumberEven positive tests \"after each\" hook in \"isNumberEven positive tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "169e23ac-99f8-4594-bfb8-3a14cfb8aa3f",
              "parentUUID": "6aa2102c-5526-4aff-ab25-1ba9f795b5b2",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return true if an even positive or negative number is provided",
              "fullTitle": "isNumberEven positive tests should return true if an even positive or negative number is provided",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(randomEvenInt);\nexpect(validationResults).to.be.equal(true);",
              "err": {},
              "uuid": "af951158-c36f-4f08-b3be-e9840d9e1406",
              "parentUUID": "6aa2102c-5526-4aff-ab25-1ba9f795b5b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false if an odd positive or negative number is provided",
              "fullTitle": "isNumberEven positive tests should return false if an odd positive or negative number is provided",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(randomOddInt);\nexpect(validationResults).to.be.equal(false);",
              "err": {},
              "uuid": "12a3d63b-3d6b-4ae6-9ece-f153e1c41093",
              "parentUUID": "6aa2102c-5526-4aff-ab25-1ba9f795b5b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false if positive number with decimal place is provided ",
              "fullTitle": "isNumberEven positive tests should return false if positive number with decimal place is provided ",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const floatOddResult = validator.isNumberEven(5.5);\nexpect(floatOddResult).to.be.equal(false);",
              "err": {},
              "uuid": "50d73e24-6a8a-4a23-9e49-bd7535bc1898",
              "parentUUID": "6aa2102c-5526-4aff-ab25-1ba9f795b5b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false if negative number with decimal place is provided",
              "fullTitle": "isNumberEven positive tests should return false if negative number with decimal place is provided",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const floatEvenResult = validator.isNumberEven(-5.5);\nexpect(floatEvenResult).to.be.equal(false);",
              "err": {},
              "uuid": "448a50e2-ab57-4d0c-aacc-2500b15e33d9",
              "parentUUID": "6aa2102c-5526-4aff-ab25-1ba9f795b5b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true if 0 is provided",
              "fullTitle": "isNumberEven positive tests should return true if 0 is provided",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const zero = validator.isNumberEven(0);\nexpect(zero).to.be.equal(true);",
              "err": {},
              "uuid": "0b400cf0-5206-42f3-ac76-ac3f47e016a6",
              "parentUUID": "6aa2102c-5526-4aff-ab25-1ba9f795b5b2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "af951158-c36f-4f08-b3be-e9840d9e1406",
            "12a3d63b-3d6b-4ae6-9ece-f153e1c41093",
            "50d73e24-6a8a-4a23-9e49-bd7535bc1898",
            "448a50e2-ab57-4d0c-aacc-2500b15e33d9",
            "0b400cf0-5206-42f3-ac76-ac3f47e016a6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e7ff171d-7341-4420-8d7b-12099eaee87a",
          "title": "isNumberEven negative tests",
          "fullFile": "C:\\Users\\Vadim_Scherbakov\\JS\\automation-js-basic\\automation-js-basic-ui\\automation-js-basic\\test\\numbers-validator\\isNumberEven.spec.js",
          "file": "\\test\\numbers-validator\\isNumberEven.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"isNumberEven negative tests\"",
              "fullTitle": "isNumberEven negative tests \"before each\" hook in \"isNumberEven negative tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "592cecb1-c3e8-40b3-a225-3861a5729eb4",
              "parentUUID": "e7ff171d-7341-4420-8d7b-12099eaee87a",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"isNumberEven negative tests\"",
              "fullTitle": "isNumberEven negative tests \"after each\" hook in \"isNumberEven negative tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "2ea51c9e-551e-40f6-9ea2-6cd9670c6684",
              "parentUUID": "e7ff171d-7341-4420-8d7b-12099eaee87a",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should throw an error if provided type is not \"Number\"",
              "fullTitle": "isNumberEven negative tests should throw an error if provided type is not \"Number\"",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "errorArray.forEach((element) => {\n  expect(() => validator.isNumberEven(element))\n      .to.throw(`[${element}] is not of type \"Number\" it is of type \"${typeof element}\"`);\n});",
              "err": {},
              "uuid": "f9002c3c-79d6-4861-8693-322652e28b7b",
              "parentUUID": "e7ff171d-7341-4420-8d7b-12099eaee87a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f9002c3c-79d6-4861-8693-322652e28b7b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}